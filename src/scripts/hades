#!/bin/bash
set -euo pipefail

readonly EX_OK=0
readonly EX_USAGE=64
readonly EX_UNAVAILABLE=69

msg() {
    echo "$@"
}

print_usage() {
    msg "Usage: $0 COMMAND"
    msg ""
    msg "Available commands"
    msg "  agent          Execute the site node agent (Celery worker)"
    msg "  auth-dhcp      Execute the DHCP server for authenticated users"
    msg "                 (dnsmasq monitored by a SignalProxyDaemon)"
    msg "  auth-dns       Execute the DNS resolver for the authenticated users"
    msg "                 (unbound)"
    msg "  database       Execute the database (PostgreSQL)"
    msg "  help           Print this help message"
    msg "  http           Execute the captive portal web server (nginx)"
    msg "  init-database  Create database cluster, database, roles, tables,"
    msg "                 views and refresh materialized views."
    msg "                 Add the --clear flag to delete the database."
    msg "  networking     Setup networking (iptables, routing)"
    msg "  portal         Run the captive portal WSGI application (using uWSGI)"
    msg "  radius         Run the RADIUS server (freeRADIUS)"
    msg "  shell          Start a bash shell for debugging"
    msg "  unauth-dhcp    Run the DHCP server for the unauthenticated users"
    msg "                 (no-op and handled by the unauth-dns dnsmasq)"
    msg "  unauth-dns     Run the DNS resolver (dnsmasq) for the unauth VLAN"
    msg "  vrrp           Run the VRRP daemon (keepalived)"
}

run_agent() {
    exec python3 -m celery.bin.worker --beat --app=hades.agent --uid="${HADES_AGENT_USER}" --gid="${HADES_AGENT_GROUP}" --workdir="${HADES_AGENT_HOME}"
}

run_auth_dns() {
    python3 -m hades.config.generate unbound.conf.j2 "${HADES_CONFIG_DIR}/unbound.conf"
    exec unbound -c "${HADES_CONFIG_DIR}/unbound.conf"
}

run_auth_dhcp() {
    python3 -m hades.config.generate auth-dnsmasq.conf.j2 "${HADES_CONFIG_DIR}/auth-dnsmasq.conf"
    exec python3 -m hades.dnsmasq.monitor "${HADES_CONFIG_DIR}/auth-dnsmasq.conf"
}

export_postgres_env() {
    export PATH="/usr/lib/postgresql/${PGVERSION}/bin:${PATH}"
    export PGDATA="/var/lib/postgresql/hades"
}

run_init_database_cluster() {
    export_postgres_env
    if [[ $(id -u) = 0 ]]; then
        exec python3 -m hades.common.su "${HADES_POSTGRESQL_USER}" "$0" init-database-cluster "$@"
    fi
    local clear=
    while [[ $# -gt 0 ]]; do
        case $1 in
            --clear) clear=1;;
            *)       msg "Unknown option $1"; exit "${EX_USAGE}";;
        esac
        shift
    done
    clear_pgdata() {
        msg "Clearing ${PGDATA}"
        shopt -s dotglob
        rm -rf "${PGDATA}"/*
        shopt -u dotglob
    }
    [[ -n ${clear} ]] && clear_pgdata
    if [[ -f "${PGDATA}/.initialized" ]]; then
        msg "Database already initialized. Use --clear to delete."
        exit "${EX_UNAVAILABLE}"
    fi
    cleanup_failure() {
        pg_ctl stop -s || true
        clear_pgdata
    }
    trap cleanup_failure EXIT HUP INT QUIT ABRT
    pg_ctl initdb -s -o "--auth-host=reject --auth-local=peer --encoding=UTF-8 --locale=C --nosync"
    python3 -m hades.config.generate postgresql.conf.j2 > "${PGDATA}/postgresql.conf"
    pg_ctl start -w -s
    local user
    for user in "${HADES_RADIUS_USER}" "${HADES_AGENT_USER}" "${HADES_PORTAL_USER}"; do
        createuser "${user}"
    done
    createdb "${HADES_POSTGRESQL_DATABASE}"
    touch "${PGDATA}/.initialized"
    pg_ctl stop -s
    trap - EXIT HUP INT QUIT ABRT
}

run_init_database_schema() {
    export_postgres_env
    if [[ $(id -u) = 0 ]]; then
        exec python3 -m hades.common.su "${HADES_POSTGRESQL_USER}" "$0" init-database-schema "$@"
    fi
    if [[ -f "${PGDATA}/.initialized_schema" ]]; then
        msg "Database already initialized. Use --clear to delete."
        exit "${EX_UNAVAILABLE}"
    fi
    trap 'pg_ctl stop -s || true' EXIT HUP INT QUIT ABRT
    pg_ctl start -w -s
    python3 -m hades.config.generate schema.sql.j2 | psql --quiet --set=ON_ERROR_STOP=1 --no-psqlrc --single-transaction --file=- "${HADES_POSTGRESQL_DATABASE}"
    touch "${PGDATA}/.initialized_schema"
    pg_ctl stop -s
    trap - EXIT HUP INT QUIT ABRT
}

run_database() {
    export_postgres_env
    if [[ ! -f "${PGDATA}/.initialized" ]]; then
        "$0" init-database-cluster "$@"
    fi
    if [[ ! -f "${PGDATA}/.initialized_schema" ]]; then
        "$0" init-database-schema "$@"
    fi
    exec python3 -m hades.common.su "${HADES_POSTGRESQL_USER}" postgres
}

run_http() {
    python3 -m hades.config.generate nginx "${HADES_CONFIG_DIR}/nginx"
    # Next two lines are not working, see https://bugzilla.redhat.com/show_bug.cgi?id=1212756
    #ln -nsf /dev/stdout /var/log/nginx/access.log
    #ln -nsf /dev/stderr /var/log/nginx/error.log
    exec nginx -c "${HADES_CONFIG_DIR}/nginx/nginx.conf"
}

run_networking() {
    if [[ "${HADES_CREATE_DUMMY_INTERFACES-False}" = True ]]; then
        local interface
        for interface in "${HADES_RADIUS_INTERFACE}" "${HADES_VRRP_INTERFACE}" "${HADES_AUTH_INTERFACE}" "${HADES_UNAUTH_INTERFACE}"; do
            if [[ -d "/sys/class/net/${interface}" ]]; then
                continue
            fi
            ip link add name "${interface}" type dummy
            ip link set up dev "${interface}"
        done
    fi
    python3 -m hades.config.generate iptables.j2 | iptables-restore
    sysctl net.ipv4.ip_nonlocal_bind=1
    ip rule add fwmark "${HADES_AUTH_FWMARK}"   table "${HADES_AUTH_ROUTING_TABLE}"
    ip rule add fwmark "${HADES_UNAUTH_FWMARK}" table "${HADES_UNAUTH_ROUTING_TABLE}"
    exit ${EX_OK}
}

run_portal() {
    python3 -m hades.config.generate uwsgi.ini.j2 "${HADES_CONFIG_DIR}/uwsgi.ini"
    exec uwsgi --ini="${HADES_CONFIG_DIR}/uwsgi.ini"
}

run_radius() {
    python3 -m hades.config.generate freeradius "${HADES_CONFIG_DIR}/freeradius"
    local -r timeout=30
    local i
    # Wait until database is available
    for i in $(seq "${timeout}"); do
        python3 -m hades.common.check_db 2 &>/dev/null && break
        sleep 1
    done
    python3 -m hades.common.check_db
    exec freeradius -f -m -d "${HADES_CONFIG_DIR}/freeradius"
}

run_shell() {
    exec bash
}

run_unauth_dhcp() {
    msg "DHCP for the unauth VLAN is currently performed by the dnsmasq "
    msg "instance that provides unauth DNS."
    exit ${EX_OK}
}

run_unauth_dns() {
    python3 -m hades.config.generate unauth-dnsmasq.conf.j2 "${HADES_CONFIG_DIR}/unauth-dnsmasq.conf"
    exec dnsmasq -k -C "${HADES_CONFIG_DIR}/unauth-dnsmasq.conf"
}

run_vrrp() {
    python3 -m hades.config.generate keepalived.conf.j2 "${HADES_CONFIG_DIR}/keepalived.conf"
    exec keepalived --log-console --dont-fork --vrrp --use-file="${HADES_CONFIG_DIR}/keepalived.conf"
}

main() {
    source <(python3 -m hades.config.export)
    local command
    if [[ $# -lt 1 ]]; then
        command=help
    else
        command=$1
        shift
    fi
    case "$command" in
        agent|auth-dhcp|auth-dns|database|http|init-database-cluster|init-database-schema|networking|portal|radius|shell|unauth-dhcp|unauth-dns|vrrp)
            "run_${command//-/_}" "$@"
            ;;
        help|-h|--help)
            print_usage
            exit ${EX_OK}
            ;;
        *)
            msg "Unknown command: $command"
            print_usage
            exit ${EX_USAGE}
            ;;
    esac
}

main "$@"
