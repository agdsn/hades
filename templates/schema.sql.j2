--
-- PostgreSQL database dump
--
{%- if HADES_LOCAL_MASTER_DATABASE %}
{%- set foreign_server_fdw = 'postgres_fdw' %}
{%- set foreign_server_options = {'host': '127.0.0.1', 'dbname': constants.LOCAL_MASTER_DATABASE_NAME} %}
{%- set foreign_server_type = None %}
{%- set foreign_server_version = None %}
{%- set foreign_table_global_options = {} %}
{%- set foreign_table_alternative_dns_options = {'table_name': 'alternative_dns'} %}
{%- set foreign_table_dhcphost_options = {'table_name': 'dhcphost'} %}
{%- set foreign_table_nas_options = {'table_name': 'nas'} %}
{%- set foreign_table_radcheck_options = {'table_name': 'radcheck'} %}
{%- set foreign_table_radgroupcheck_options = {'table_name': 'radgroupcheck'} %}
{%- set foreign_table_radgroupreply_options = {'table_name': 'radgroupreply'} %}
{%- set foreign_table_radreply_options = {'table_name': 'radreply'} %}
{%- set foreign_table_radusergroup_options = {'table_name': 'radusergroup'} %}
{%- set user_mappings = {'PUBLIC': {'user': constants.LOCAL_MASTER_DATABASE_USER, 'password': constants.LOCAL_MASTER_DATABASE_PASSWORD}} %}
{%- else %}
{%- set foreign_server_fdw = HADES_POSTGRESQL_FOREIGN_SERVER_FDW %}
{%- set foreign_server_options = HADES_POSTGRESQL_FOREIGN_SERVER_OPTIONS %}
{%- set foreign_server_type = HADES_POSTGRESQL_FOREIGN_SERVER_TYPE if HADES_POSTGRESQL_FOREIGN_SERVER_TYPE is defined else None %}
{%- set foreign_server_version = HADES_POSTGRESQL_FOREIGN_SERVER_VERSION if HADES_POSTGRESQL_FOREIGN_SERVER_VERSION is defined else None %}
{%- set foreign_table_global_options = HADES_POSTGRESQL_FOREIGN_TABLE_GLOBAL_OPTIONS %}
{%- set foreign_table_alternative_dns_options = HADES_POSTGRESQL_FOREIGN_TABLE_ALTERNATIVE_DNS_OPTIONS %}
{%- set foreign_table_dhcphost_options = HADES_POSTGRESQL_FOREIGN_TABLE_DHCPHOST_OPTIONS %}
{%- set foreign_table_nas_options = HADES_POSTGRESQL_FOREIGN_TABLE_NAS_OPTIONS %}
{%- set foreign_table_radcheck_options = HADES_POSTGRESQL_FOREIGN_TABLE_RADCHECK_OPTIONS %}
{%- set foreign_table_radgroupcheck_options = HADES_POSTGRESQL_FOREIGN_TABLE_RADGROUPCHECK_OPTIONS %}
{%- set foreign_table_radgroupreply_options = HADES_POSTGRESQL_FOREIGN_TABLE_RADGROUPREPLY_OPTIONS %}
{%- set foreign_table_radreply_options = HADES_POSTGRESQL_FOREIGN_TABLE_RADREPLY_OPTIONS %}
{%- set foreign_table_radusergroup_options = HADES_POSTGRESQL_FOREIGN_TABLE_RADUSERGROUP_OPTIONS %}
{%- set user_mappings = HADES_POSTGRESQL_USER_MAPPINGS %}
{%- endif -%}

{%- macro join_options(options) %}
    {%- if options %}
    {%- set items = options.items()|list %}
    {%- for name, value in items[:-1] %}
    {{ name }} '{{ value }}',
    {%- endfor %}
    {{ items[-1][0] }} '{{ items[-1][1] }}'
    {%- endif %}
{%- endmacro %}


{%- macro table_options(options) %}
    {%- set options = options.copy() %}
    {%- do options.update(foreign_table_global_options) %}
    {{ join_options(options) }}
{%- endmacro %}

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: {{ foreign_server_fdw }}; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS {{ foreign_server_fdw }} WITH SCHEMA public;


SET search_path = public, pg_catalog;

--
-- Name: decode_attribute_value_pairs(text); Type: FUNCTION; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FUNCTION decode_attribute_value_pairs(string text) RETURNS text[][2]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    rv text;
BEGIN
    SELECT array_agg(keyval) INTO STRICT rv FROM (SELECT regexp_matches(string, '(?:\A|, )([^=]+) = ((?:"(?:\\.|[^"\\])*"|[^",]+))(?:\Z|(?=, ))', 'g') as keyval) AS matches;
    RETURN rv;
END;
$$;


ALTER FUNCTION public.decode_attribute_value_pairs(string text) OWNER TO "hades-database";

--
-- Name: FUNCTION decode_attribute_value_pairs(string text); Type: COMMENT; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

COMMENT ON FUNCTION decode_attribute_value_pairs(string text) IS 'Decode freeRADIUS attribute-values pairs as exportet by the pairs xlat function into an array of arrays of key-value pairs.';


--
-- Name: decode_equals_encoding(text); Type: FUNCTION; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FUNCTION decode_equals_encoding(string text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    rv text;
BEGIN
    SELECT string_agg(concat(convert_from(decode(match[1], 'hex'), 'SQL_ASCII'), match[2]), '') INTO STRICT rv FROM (
            SELECT regexp_matches(string, '(?:=([0-9a-f]{2})|([^=]+))', 'gi') as match
        ) AS tokens;
    RETURN rv;
END;
$$;


ALTER FUNCTION public.decode_equals_encoding(string text) OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: FUNCTION decode_equals_encoding(string text); Type: COMMENT; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

COMMENT ON FUNCTION decode_equals_encoding(string text) IS 'Decode a string, where some bytes have been encoded with a scheme similar to the percent encoding of URIs: an equal sign (=) followed by two hexadecimal characters';


--
-- Name: safe_inet_cast(text); Type: FUNCTION; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FUNCTION safe_inet_cast(inp text) RETURNS inet
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
BEGIN
    RETURN CAST(inp AS inet);
EXCEPTION WHEN data_exception THEN
    RETURN NULL;
END;
$$;


ALTER FUNCTION public.safe_inet_cast(inp text) OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: safe_macaddr_cast(text); Type: FUNCTION; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FUNCTION safe_macaddr_cast(inp text) RETURNS macaddr
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
BEGIN
    RETURN CAST(inp AS macaddr);
EXCEPTION WHEN data_exception THEN
    RETURN NULL;
END;
$$;


ALTER FUNCTION public.safe_macaddr_cast(inp text) OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: master; Type: SERVER; Schema: -; Owner: {{ constants.DATABASE_USER }}
--

{%- set server_name = 'master' %}
CREATE SERVER {{ server_name }}
    {%- if foreign_server_type    %} TYPE    '{{ foreign_server_type    }}'{% endif %}
    {%- if foreign_server_version %} VERSION '{{ foreign_server_version }}'{% endif %}
    FOREIGN DATA WRAPPER {{ foreign_server_fdw }} OPTIONS (
    {{ join_options(foreign_server_options) }}
);


ALTER SERVER master OWNER TO "{{ constants.DATABASE_USER }}";
{%- for user_name, options in user_mappings.items() %}

--
-- Name: USER MAPPING {{ user_name }} SERVER {{ server_name }}; Type: USER MAPPING; Schema: -; Owner: {{ constants.DATABASE_USER }}
--

CREATE USER MAPPING FOR
{%- if user_name == 'PUBLIC' %}
PUBLIC
{%- else %}
"{{ user_name }}"
{%- endif %}
SERVER {{ server_name }} OPTIONS (
    {{ join_options(options) }}
);
{%- endfor %}


SET default_tablespace = '';

--
-- Name: foreign_alternative_dns; Type: FOREIGN TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FOREIGN TABLE foreign_alternative_dns (
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_ALTERNATIVE_DNS_IPADDRESS_STRING %}
    "IpAddress" text /* NOT NULL */
    {%- else %}
    "IpAddress" inet /* NOT NULL */
    {%- endif %}
)
SERVER {{ server_name }}
OPTIONS (
    {{ table_options(foreign_table_alternative_dns_options) }}
);


ALTER FOREIGN TABLE foreign_alternative_dns OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: alternative_dns; Type: MATERIALIZED VIEW; Schema: public; Owner: {{ constants.DATABASE_USER }}
--
{%- if HADES_POSTGRESQL_FOREIGN_TABLE_ALTERNATIVE_DNS_IPADDRESS_STRING %}
{%- set foreign_alternative_dns_ipaddress = 'safe_inet_cast(foreign_alternative_dns."IpAddress"::text)' %}
{%- else %}
{%- set foreign_alternative_dns_ipaddress = 'foreign_alternative_dns."IpAddress"' %}
{%- endif %}

CREATE MATERIALIZED VIEW alternative_dns AS
 SELECT "IpAddress" FROM foreign_alternative_dns GROUP BY "IpAddress" WITH NO DATA;


ALTER TABLE alternative_dns OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: foreign_dhcphost; Type: FOREIGN TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FOREIGN TABLE foreign_dhcphost (
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_DHCPHOST_MAC_STRING %}
    "Mac" text /* NOT NULL */,
    {%- else %}
    "Mac" macaddr /* NOT NULL */,
    {%- endif %}
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_DHCPHOST_IPADDRESS_STRING %}
    "IpAddress" text /* NOT NULL */
    {%- else %}
    "IpAddress" inet /* NOT NULL */
    {%- endif %}
)
SERVER {{ server_name }}
OPTIONS (
    {{ table_options(foreign_table_dhcphost_options) }}
);


ALTER FOREIGN TABLE foreign_dhcphost OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: dhcphost; Type: MATERIALIZED VIEW; Schema: public; Owner: {{ constants.DATABASE_USER }}
--
{%- if HADES_POSTGRESQL_FOREIGN_TABLE_DHCPHOST_MAC_STRING %}
{%- set foreign_dhcphost_mac = 'safe_macaddr_cast(foreign_dhcphost."Mac"::text)' %}
{%- else %}
{%- set foreign_dhcphost_mac = 'foreign_dhcphost."Mac"' %}
{%- endif %}
{%- if HADES_POSTGRESQL_FOREIGN_TABLE_DHCPHOST_IPADDRESS_STRING %}
{%- set foreign_dhcphost_ipaddress = 'safe_inet_cast(foreign_dhcphost."IpAddress"::text)' %}
{%- else %}
{%- set foreign_dhcphost_ipaddress = 'foreign_dhcphost."IpAddress"' %}
{%- endif %}

CREATE MATERIALIZED VIEW dhcphost AS
 SELECT indexed."Mac",
    indexed."IpAddress"
   FROM ( SELECT row_number() OVER "Mac_window" AS "Mac_index",
            row_number() OVER "IpAddress_window" AS "IpAddress_index",
            {{ foreign_dhcphost_mac }} AS "Mac",
            {{ foreign_dhcphost_ipaddress }} AS "IpAddress"
           FROM foreign_dhcphost
          WHERE (({{ foreign_dhcphost_mac }} IS NOT NULL) AND ({{ foreign_dhcphost_ipaddress }} IS NOT NULL))
          WINDOW "Mac_window" AS (PARTITION BY {{ foreign_dhcphost_mac }}), "IpAddress_window" AS (PARTITION BY {{ foreign_dhcphost_ipaddress }})) indexed
  WHERE ((indexed."Mac_index" = 1) AND (indexed."IpAddress_index" = 1))
  WITH NO DATA;


ALTER TABLE dhcphost OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: foreign_nas; Type: FOREIGN TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FOREIGN TABLE foreign_nas (
    "Id" integer /* NOT NULL */,
    "NASName" text /* NOT NULL */,
    "ShortName" text /* NOT NULL */,
    "Type" text DEFAULT 'other'::character varying /* NOT NULL */,
    "Ports" integer,
    "Secret" text /* NOT NULL */,
    "Server" text,
    "Community" text,
    "Description" text
)
SERVER {{ server_name }}
OPTIONS (
    {{ table_options(foreign_table_nas_options) }}
);


ALTER FOREIGN TABLE foreign_nas OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: foreign_radcheck; Type: FOREIGN TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FOREIGN TABLE foreign_radcheck (
    "Priority" integer /* NOT NULL */,
    "UserName" text  /* NOT NULL */,
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_RADCHECK_NASIPADDRESS_STRING %}
    "NASIpAddress" text,
    {%- else %}
    "NASIpAddress" inet,
    {%- endif %}
    "NASPortId" text,
    "Attribute" text /* NOT NULL */,
    "Op" character(2) /* NOT NULL */,
    "Value" text /* NOT NULL */
)
SERVER {{ server_name }}
OPTIONS (
    {{ table_options(foreign_table_radcheck_options) }}
);


ALTER FOREIGN TABLE foreign_radcheck OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: foreign_radgroupcheck; Type: FOREIGN TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FOREIGN TABLE foreign_radgroupcheck (
    "Priority" integer /* NOT NULL */,
    "GroupName" text /* NOT NULL */,
    "Attribute" text /* NOT NULL */,
    "Op" character(2) /* NOT NULL */,
    "Value" text /* NOT NULL */
)
SERVER {{ server_name }}
OPTIONS (
    {{ table_options(foreign_table_radgroupcheck_options) }}
);


ALTER FOREIGN TABLE foreign_radgroupcheck OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: foreign_radgroupreply; Type: FOREIGN TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FOREIGN TABLE foreign_radgroupreply (
    "Priority" integer /* NOT NULL */,
    "GroupName" text /* NOT NULL */,
    "Attribute" text /* NOT NULL */,
    "Op" character(2) /* NOT NULL */,
    "Value" text /* NOT NULL */
)
SERVER {{ server_name }}
OPTIONS (
    {{ table_options(foreign_table_radgroupreply_options) }}
);


ALTER FOREIGN TABLE foreign_radgroupreply OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: foreign_radreply; Type: FOREIGN TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FOREIGN TABLE foreign_radreply (
    "Priority" integer /* NOT NULL */,
    "UserName" text /* NOT NULL */,
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_RADREPLY_NASIPADDRESS_STRING %}
    "NASIpAaddress" text,
    {%- else %}
    "NASIpAddress" inet,
    {%- endif %}
    "NASPortId" text,
    "Attribute" text /* NOT NULL */,
    "Op" character(2) DEFAULT '='::bpchar /* NOT NULL */,
    "Value" text /* NOT NULL */
)
SERVER {{ server_name }}
OPTIONS (
    {{ table_options(foreign_table_radreply_options) }}
);


ALTER FOREIGN TABLE foreign_radreply OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: foreign_radusergroup; Type: FOREIGN TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE FOREIGN TABLE foreign_radusergroup (
    "UserName" text /* NOT NULL */,
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_RADUSERGROUP_NASIPADDRESS_STRING %}
    "NASIpAddress" text,
    {%- else %}
    "NASIpAddress" inet,
    {%- endif %}
    "NASPortId" text,
    "GroupName" text /* NOT NULL */,
    "Priority" integer /* NOT NULL */
)
SERVER {{ server_name }}
OPTIONS (
    {{ table_options(foreign_table_radusergroup_options) }}
);


ALTER FOREIGN TABLE foreign_radusergroup OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: nas; Type: MATERIALIZED VIEW; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE MATERIALIZED VIEW nas AS
 SELECT row_number() OVER () AS "Id",
    indexed."NASName",
    indexed."ShortName",
    indexed."Type",
    indexed."Ports",
    indexed."Secret",
    indexed."Server",
    indexed."Community",
    indexed."Description"
   FROM ( SELECT row_number() OVER "NASName_window" AS "NASName_index",
            row_number() OVER "ShortName_window" AS "ShortName_index",
            foreign_nas."NASName",
            foreign_nas."ShortName",
            foreign_nas."Type",
            foreign_nas."Ports",
            foreign_nas."Secret",
            foreign_nas."Server",
            foreign_nas."Community",
            foreign_nas."Description"
           FROM foreign_nas
          WHERE ((foreign_nas."Id" IS NOT NULL)
            AND (foreign_nas."NASName" IS NOT NULL)
            AND (foreign_nas."ShortName" IS NOT NULL)
            AND (foreign_nas."Type" IS NOT NULL)
            AND (foreign_nas."Secret" IS NOT NULL))
          WINDOW "NASName_window" AS (PARTITION BY foreign_nas."NASName"), "ShortName_window" AS (PARTITION BY foreign_nas."ShortName")) indexed
  WHERE ((indexed."NASName_index" = 1) AND (indexed."ShortName_index" = 1))
  WITH NO DATA;


ALTER TABLE nas OWNER TO "{{ constants.DATABASE_USER }}";

SET default_with_oids = false;

--
-- Name: radacct; Type: TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE TABLE radacct (
    "RadAcctId" bigint NOT NULL,
    "AcctSessionId" text NOT NULL,
    "AcctUniqueId" text NOT NULL,
    "UserName" text,
    "GroupName" text,
    "Realm" text,
    "NASIpAddress" inet NOT NULL,
    "NASPortId" text,
    "NASPortType" text,
    "AcctStartTime" timestamp with time zone,
    "AcctUpdateTime" timestamp with time zone,
    "AcctStopTime" timestamp with time zone,
    "AcctInterval" bigint,
    "AcctSessionTime" bigint,
    "AcctAuthentic" text,
    "ConnectInfo_start" text,
    "ConnectInfo_stop" text,
    "AcctInputOctets" bigint,
    "AcctOutputOctets" bigint,
    "CalledStationId" text,
    "CallingStationId" text,
    "AcctTerminateCause" text,
    "ServiceType" text,
    "FramedProtocol" text,
    "FramedIPAddress" inet
);


ALTER TABLE radacct OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radacct_RadAcctId_seq; Type: SEQUENCE; Schema: public; Owner: hades-database
--

CREATE SEQUENCE "radacct_RadAcctId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "radacct_RadAcctId_seq" OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radacct_RadAcctId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

ALTER SEQUENCE "radacct_RadAcctId_seq" OWNED BY radacct."RadAcctId";


--
-- Name: radcheck; Type: MATERIALIZED VIEW; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE MATERIALIZED VIEW radcheck AS
 SELECT row_number() OVER w AS "Priority",
    foreign_radcheck."UserName",
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_RADCHECK_NASIPADDRESS_STRING %}
    safe_inet_cast(foreign_radcheck.NASIpAddress) AS "NASIpAddress",
    {%- else %}
    foreign_radcheck."NASIpAddress",
    {%- endif %}
    foreign_radcheck."NASPortId",
    foreign_radcheck."Attribute",
    foreign_radcheck."Op",
    foreign_radcheck."Value"
   FROM foreign_radcheck
  WHERE ((foreign_radcheck."UserName" IS NOT NULL)
    AND (foreign_radcheck."Attribute" IS NOT NULL)
    AND (foreign_radcheck."Op" IS NOT NULL)
    AND (foreign_radcheck."Value" IS NOT NULL))
  WINDOW w AS (PARTITION BY foreign_radcheck."UserName", foreign_radcheck."NASIpAddress", foreign_radcheck."NASPortId" ORDER BY foreign_radcheck."Priority")
  WITH DATA;


ALTER TABLE radcheck OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radgroupcheck; Type: MATERIALIZED VIEW; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE MATERIALIZED VIEW radgroupcheck AS
 SELECT row_number() OVER w AS "Priority",
    foreign_radgroupcheck."GroupName",
    foreign_radgroupcheck."Attribute",
    foreign_radgroupcheck."Op",
    foreign_radgroupcheck."Value"
   FROM foreign_radgroupcheck
  WHERE ((foreign_radgroupcheck."GroupName" IS NOT NULL)
    AND (foreign_radgroupcheck."Attribute" IS NOT NULL)
    AND (foreign_radgroupcheck."Op" IS NOT NULL)
    AND (foreign_radgroupcheck."Value" IS NOT NULL))
  WINDOW w AS (PARTITION BY foreign_radgroupcheck."GroupName" ORDER BY foreign_radgroupcheck."Priority")
  WITH DATA;


ALTER TABLE radgroupcheck OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radgroupreply; Type: MATERIALIZED VIEW; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE MATERIALIZED VIEW radgroupreply AS
 SELECT row_number() OVER w AS "Priority",
    foreign_radgroupreply."GroupName",
    foreign_radgroupreply."Attribute",
    foreign_radgroupreply."Op",
    foreign_radgroupreply."Value"
   FROM foreign_radgroupreply
  WHERE ((foreign_radgroupreply."GroupName" IS NOT NULL)
   AND (foreign_radgroupreply."Attribute" IS NOT NULL)
   AND (foreign_radgroupreply."Op" IS NOT NULL)
   AND (foreign_radgroupreply."Value" IS NOT NULL))
  WINDOW w AS (PARTITION BY foreign_radgroupreply."GroupName" ORDER BY foreign_radgroupreply."Priority")
  WITH DATA;


ALTER TABLE radgroupreply OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radpostauth; Type: TABLE; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE TABLE radpostauth (
    "Id" bigint NOT NULL,
    "UserName" text NOT NULL,
    "NASIpAddress" inet NOT NULL,
    "NASPortId" text,
    "PacketType" text NOT NULL,
    "Groups" text[],
    "Reply" text[][2],
    "AuthDate" timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE radpostauth OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radpostauth_Id_seq; Type: SEQUENCE; Schema: public; Owner: hades-database
--

CREATE SEQUENCE "radpostauth_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "radpostauth_Id_seq" OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radpostauth_Id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

ALTER SEQUENCE "radpostauth_Id_seq" OWNED BY radpostauth."Id";


--
-- Name: radreply; Type: MATERIALIZED VIEW; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE MATERIALIZED VIEW radreply AS
 SELECT row_number() OVER w AS "Priority",
    foreign_radreply."UserName",
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_RADREPLY_NASIPADDRESS_STRING %}
    safe_inet_cast(foreign_radreply.NASIpAddress) AS "NASIpAddress",
    {%- else %}
    foreign_radreply."NASIpAddress",
    {%- endif %}
    foreign_radreply."NASPortId",
    foreign_radreply."Attribute",
    foreign_radreply."Op",
    foreign_radreply."Value"
   FROM foreign_radreply
  WHERE ((foreign_radreply."UserName" IS NOT NULL)
   AND (foreign_radreply."Attribute" IS NOT NULL)
   AND (foreign_radreply."Op" IS NOT NULL)
   AND (foreign_radreply."Value" IS NOT NULL))
  WINDOW w AS (PARTITION BY foreign_radreply."UserName", foreign_radreply."NASIpAddress", foreign_radreply."NASPortId" ORDER BY foreign_radreply."Priority")
  WITH DATA;


ALTER TABLE radreply OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radusergroup; Type: MATERIALIZED VIEW; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE MATERIALIZED VIEW radusergroup AS
 SELECT foreign_radusergroup."UserName",
    {%- if HADES_POSTGRESQL_FOREIGN_TABLE_RADUSERGROUP_NASIPADDRESS_STRING %}
    safe_inet_cast(foreign_radusergroup.NASIpAddress) AS "NASIpAddress",
    {%- else %}
    foreign_radusergroup."NASIpAddress",
    {%- endif %}
    foreign_radusergroup."NASPortId",
    foreign_radusergroup."GroupName",
    row_number() OVER w AS "Priority"
   FROM foreign_radusergroup
  WHERE ((foreign_radusergroup."UserName" IS NOT NULL)
   AND (foreign_radusergroup."GroupName" IS NOT NULL))
  WINDOW w AS (PARTITION BY foreign_radusergroup."UserName", foreign_radusergroup."NASIpAddress", foreign_radusergroup."NASPortId" ORDER BY foreign_radusergroup."Priority")
  WITH DATA;


ALTER TABLE radusergroup OWNER TO "{{ constants.DATABASE_USER }}";

--
-- Name: radacct RadAcctId; Type: DEFAULT; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

ALTER TABLE ONLY radacct ALTER COLUMN "RadAcctId" SET DEFAULT nextval('"radacct_RadAcctId_seq"'::regclass);


--
-- Name: radpostauth Id; Type: DEFAULT; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

ALTER TABLE ONLY radpostauth ALTER COLUMN "Id" SET DEFAULT nextval('"radpostauth_Id_seq"'::regclass);


--
-- Name: radacct radacct_AcctUniqueId_key; Type: CONSTRAINT; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

ALTER TABLE ONLY radacct
    ADD CONSTRAINT "radacct_AcctUniqueId_key" UNIQUE ("AcctUniqueId");


--
-- Name: radacct radacct_pkey; Type: CONSTRAINT; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

ALTER TABLE ONLY radacct
    ADD CONSTRAINT radacct_pkey PRIMARY KEY ("RadAcctId");


--
-- Name: radpostauth radpostauth_pkey; Type: CONSTRAINT; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

ALTER TABLE ONLY radpostauth
    ADD CONSTRAINT radpostauth_pkey PRIMARY KEY ("Id");


--
-- Name: alternative_dns_IpAddress_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX "alternative_dns_IpAddress_idx" ON alternative_dns USING btree ("IpAddress");


--
-- Name: dhcphost_IpAddress_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX "dhcphost_IpAddress_idx" ON dhcphost USING btree ("IpAddress");


--
-- Name: dhcphost_Mac_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX "dhcphost_Mac_idx" ON dhcphost USING btree ("Mac");


--
-- Name: nas_NASName_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX "nas_NASName_idx" ON nas USING btree ("NASName");


--
-- Name: radacct_active_session_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE INDEX radacct_active_session_idx ON radacct USING btree ("AcctUniqueId") WHERE ("AcctStopTime" IS NULL);


--
-- Name: radacct_bulk_close; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE INDEX radacct_bulk_close ON radacct USING btree ("NASIpAddress", "AcctStartTime") WHERE ("AcctStopTime" IS NULL);


--
-- Name: radacct_start_user_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE INDEX radacct_start_user_idx ON radacct USING btree ("AcctStartTime", "UserName");


--
-- Name: radcheck_user_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX radcheck_user_idx ON radcheck USING btree ("UserName", "NASIpAddress", "NASPortId", "Priority");


--
-- Name: radgroupcheck_group_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX radgroupcheck_group_idx ON radgroupcheck USING btree ("GroupName", "Priority");


--
-- Name: radgroupreply_group_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX radgroupreply_group_idx ON radgroupreply USING btree ("GroupName", "Priority");


--
-- Name: radpostauth_AuthDate_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE INDEX "radpostauth_AuthDate_idx" ON radpostauth USING brin ("AuthDate") WITH (pages_per_range='16');


--
-- Name: radpostauth_UserName_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE INDEX "radpostauth_UserName_idx" ON radpostauth USING btree ("UserName");


--
-- Name: radpostauth_port_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE INDEX radpostauth_port_idx ON radpostauth USING btree ("NASIpAddress", "NASPortId");


--
-- Name: radreply_user_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX radreply_user_idx ON radreply USING btree ("UserName", "NASIpAddress", "NASPortId", "Priority");


--
-- Name: radusergroup_membership_idx; Type: INDEX; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

CREATE UNIQUE INDEX radusergroup_membership_idx ON radusergroup USING btree ("UserName", "NASIpAddress", "NASPortId", "Priority");


--
-- Name: alternative_dns; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

REFRESH MATERIALIZED VIEW alternative_dns;


--
-- Name: dhcphost; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

REFRESH MATERIALIZED VIEW dhcphost;


--
-- Name: nas; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

REFRESH MATERIALIZED VIEW nas;


--
-- Name: radcheck; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

REFRESH MATERIALIZED VIEW radcheck;


--
-- Name: radgroupcheck; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

REFRESH MATERIALIZED VIEW radgroupcheck;


--
-- Name: radgroupreply; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

REFRESH MATERIALIZED VIEW radgroupreply;


--
-- Name: radreply; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

REFRESH MATERIALIZED VIEW radreply;


--
-- Name: radusergroup; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

REFRESH MATERIALIZED VIEW radusergroup;


--
-- Name: radacct; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT ON TABLE radacct TO "{{ constants.AGENT_USER }}";
GRANT SELECT ON TABLE radacct TO "{{ constants.PORTAL_USER }}";
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE radacct TO "{{ constants.RADIUS_USER }}";


--
-- Name: radacct_RadAcctId_seq; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT,USAGE ON SEQUENCE "radacct_RadAcctId_seq" TO "{{ constants.RADIUS_USER }}";


--
-- Name: radcheck; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT ON TABLE radcheck TO "{{ constants.RADIUS_USER }}";


--
-- Name: radgroupcheck; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT ON TABLE radgroupcheck TO "{{ constants.RADIUS_USER }}";


--
-- Name: radgroupreply; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT ON TABLE radgroupreply TO "{{ constants.RADIUS_USER }}";


--
-- Name: radpostauth; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT ON TABLE radpostauth TO "{{ constants.AGENT_USER }}";
GRANT SELECT ON TABLE radpostauth TO "{{ constants.PORTAL_USER }}";
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE radpostauth TO "{{ constants.RADIUS_USER }}";


--
-- Name: radpostauth_Id_seq; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT,USAGE ON SEQUENCE "radpostauth_Id_seq" TO "{{ constants.RADIUS_USER }}";


--
-- Name: radreply; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT ON TABLE radreply TO "{{ constants.PORTAL_USER }}";
GRANT SELECT ON TABLE radreply TO "{{ constants.RADIUS_USER }}";


--
-- Name: radusergroup; Type: ACL; Schema: public; Owner: {{ constants.DATABASE_USER }}
--

GRANT SELECT ON TABLE radusergroup TO "{{ constants.PORTAL_USER }}";
GRANT SELECT ON TABLE radusergroup TO "{{ constants.RADIUS_USER }}";


--
-- PostgreSQL database dump complete
--
