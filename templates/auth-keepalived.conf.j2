global_defs {
    notification_email {
        root@agdsn
    }
    notification_email_from {{ HADES_SITE_NODE_ID }}@agdsn
    router_id {{ HADES_SITE_NAME }}
    enable_script_security
    script_user root
}

static_ipaddress {
    {{ HADES_VRRP_LISTEN_AUTH  }} dev eth1
}

vrrp_script check_services {
    script "{{ constants.pkglibexecdir }}/check-services.sh auth"
    interval 2
}

vrrp_instance hades-auth {
    {%- if HADES_INITIAL_MASTER %}
    state MASTER
    {%- else %}
    state BACKUP
    {%- endif %}
    preempt_delay {{ HADES_VRRP_PREEMPTION_DELAY.total_seconds()|int }}

    interface eth1

    track_script {
        check_services
    }

    mcast_src_ip {{ HADES_VRRP_LISTEN_AUTH.ip }}

    garp_master_refresh {{ HADES_GRATUITOUS_ARP_INTERVAL.total_seconds()|int }}
    garp_master_refresh_repeat 1

    virtual_router_id {{ HADES_VRRP_VIRTUAL_ROUTER_ID_AUTH }}
    advert_int {{ HADES_VRRP_ADVERTISEMENT_INTERVAL.total_seconds()|int }}

    priority {{ HADES_PRIORITY }}

    authentication {
        auth_type PASS
        auth_pass {{ HADES_VRRP_PASSWORD }}
    }

    virtual_ipaddress {
        {%- for network in HADES_AUTH_LISTEN %}
        {{ network }} dev eth2
        {%- endfor %}
    }

    virtual_routes {
        {%- for network in HADES_USER_NETWORKS.values() %}
        {{ network.cidr }} via {{ HADES_AUTH_NEXT_HOP.ip }} dev eth2
        {%- endfor %}
    }
}
