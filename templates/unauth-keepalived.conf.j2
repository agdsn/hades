global_defs {
    {% if HADES_MAIL_DESTINATION_ADDRESSES %}
    notification_email {
        {% for address in HADES_MAIL_DESTINATION_ADDRESSES %}
        {{ address }}
        {% endfor %}
    }
    {% endif %}
    {% if HADES_MAIL_SENDER_ADDRESS %}
    notification_email_from {{ HADES_MAIL_SENDER_ADDRESS }}
    {% endif %}
    router_id {{ HADES_SITE_NAME }}
    enable_script_security
    script_user root
    {% if HADES_MAIL_SMTP_SERVER %}
    smtp_server {{ HADES_MAIL_SMTP_SERVER }}
    smtp_connect_timeout 30
    {% endif %}
}

instance hades_unauth

static_ipaddress {
    {{ HADES_VRRP_LISTEN_UNAUTH  }} dev eth1
}

vrrp_script check_services {
    script "{{ constants.pkglibexecdir }}/check-services.sh unauth"
    interval 2
    fall 3
    rise 3
    timeout 10
}

vrrp_instance hades-unauth {
    {% if HADES_INITIAL_MASTER %}
    state MASTER
    {% else %}
    state BACKUP
    {% endif %}
    preempt_delay {{ HADES_VRRP_PREEMPTION_DELAY.total_seconds()|int }}

    interface eth1

    track_script {
        check_services
    }

    mcast_src_ip {{ HADES_VRRP_LISTEN_UNAUTH.ip }}

    garp_master_refresh {{ HADES_GRATUITOUS_ARP_INTERVAL.total_seconds()|int }}
    garp_master_refresh_repeat 1

    virtual_router_id {{ HADES_VRRP_VIRTUAL_ROUTER_ID_UNAUTH }}
    advert_int {{ HADES_VRRP_ADVERTISEMENT_INTERVAL.total_seconds()|int }}
    {% if HADES_MAIL_SMTP_SERVER %}
    smtp_alert
    {% endif %}

    priority {{ HADES_PRIORITY }}

    authentication {
        auth_type PASS
        auth_pass {{ HADES_VRRP_PASSWORD }}
    }

    virtual_ipaddress {
        {% for network in HADES_UNAUTH_LISTEN %}
        {{ network }} dev eth2
        {% endfor %}
        {% for network in HADES_USER_NETWORKS.values() %}
        {{ network }} dev eth2
        {% endfor %}
    }

    notify "{{ constants.bindir }}/hades-vrrp-notify"
}
